/*
 * Pueda usar esta plantilla para la carga del reto a iMaster
 * Copie las clases de los paquetes Modelo, Vista, Controlador y Util
 * No incluya los import de los archivos .java solo las clases
 */
// Importaciones necesarias en iMaster
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Remplace en adelante por las clases de sus archivos .java

// Vista
public class VistaRequerimientos {

    public static final ControladorRequerimientos controlador = new ControladorRequerimientos();

    public static void requerimiento1(){
        try {
          var requerimiento_1s = controlador.consultarRequerimiento1();
          for(Requerimiento_1 registro : requerimiento_1s){
            System.out.printf("%s %d  %n", 
                                    registro.getNombreMaterial(), 
                                    registro.getPrecioUnidad());
        }
        } catch (Exception e) {
            System.err.println(e);
        }
    }

    public static void requerimiento2(){
        try {
            var requerimiento_2s = controlador.consultarRequerimiento2();
            for(Requerimiento_2 registro : requerimiento_2s){
              System.out.printf("%s %s  %n", 
                                      registro.getConstructora(), 
                                      registro.getCiudad());
          }
            
        } catch (Exception e) {
            System.err.println(e);
        }
    }





    public static void requerimiento3(){
        try {
            
            var requerimiento_3s = controlador.consultarRequerimiento3();
            for(Requerimiento_3 registro : requerimiento_3s){
                System.out.printf("%s %s %s %d %d %n", 
                                        registro.getProveedor(), 
                                        registro.getNombreMaterial(), 
                                        registro.getImportado(),
                                        registro.getPrecioUnidad(),
                                        registro.getCantidad()); 
            }
        } catch (Exception e) {
            System.err.println(e);
        }
    }

    
}

// Controlador
public class ControladorRequerimientos {
    // Su c√≥digo
    private Requerimiento_1Dao requerimiento_1Dao;
    private Requerimiento_3Dao requerimiento_3Dao;
    private Requerimiento_2Dao requerimiento_2Dao;

    public ControladorRequerimientos(){
        this.requerimiento_1Dao = new Requerimiento_1Dao();
        this.requerimiento_2Dao = new Requerimiento_2Dao();
        this.requerimiento_3Dao = new Requerimiento_3Dao();
    }

    
    
    public ArrayList<Requerimiento_1> consultarRequerimiento1() throws SQLException {
       return requerimiento_1Dao.requerimiento1();
    }

    public ArrayList<Requerimiento_2> consultarRequerimiento2() throws SQLException {
        return requerimiento_2Dao.requerimiento2();
    }

    public ArrayList<Requerimiento_3> consultarRequerimiento3() throws SQLException {
        return requerimiento_3Dao.requerimiento3();
    }


    



}


// Modelo
// VO
public class Requerimiento_1 {
    
    private String nombreMaterial;
    private Integer precioUnidad;


    public Requerimiento_1(){

    }


    public String getNombreMaterial(){
        return nombreMaterial;
    }

    public Integer getPrecioUnidad(){
        return precioUnidad;
    }

    public void setNombreMaterial(String nombrematerial){
        this.nombreMaterial = nombrematerial;
    }

    public void setPrecioUnidad(Integer preciounidad){
        this.precioUnidad = preciounidad;
    }


}

public class Requerimiento_2 {
    
    private String constructora;

    private String ciudad;


    public Requerimiento_2(){

    }


    public String getConstructora(){
        return constructora;
    }

    public String getCiudad(){
        return ciudad;
    }


    public void setConstructora(String constructora){
        this.constructora = constructora;
    }

    public void setCiudad(String ciudad){
        this.ciudad = ciudad;
    }

}

public class Requerimiento_3 {


    private String proveedor;
    private String nombreMaterial;
    private String importado;
    private Integer precioUnidad;
    private Integer cantidad;


    public Requerimiento_3(){

    }

    public String getProveedor() {
        return proveedor;
    }
    public void setProveedor(String proveedor) {
        this.proveedor = proveedor;
    }
    public String getNombreMaterial() {
        return nombreMaterial;
    }
    public void setNombreMaterial(String nombreMaterial) {
        this.nombreMaterial = nombreMaterial;
    }
    public String getImportado() {
        return importado;
    }
    public void setImportado(String importado) {
        this.importado = importado;
    }
    public Integer getPrecioUnidad() {
        return precioUnidad;
    }
    public void setPrecioUnidad(Integer precioUnidad) {
        this.precioUnidad = precioUnidad;
    }
    public Integer getCantidad() {
        return cantidad;
    }

    public void setCantidad(Integer cantidad){
        this.cantidad = cantidad;
    }


}











// DAO
public class Requerimiento_1Dao {
    public ArrayList<Requerimiento_1> requerimiento1() throws SQLException {
       var connection = JDBCUtilities.getConnection();
       var respuesta = new ArrayList<Requerimiento_1>(); 


       var consulta = "SELECT mc.Nombre_Material, mc.Precio_Unidad"
       + " FROM MaterialConstruccion mc "
       + " WHERE mc.Importado = 'Si'"
       + " ORDER BY mc.Precio_Unidad DESC ;"; 


       PreparedStatement stmt = null;
       ResultSet rset = null;


       try{

        stmt = connection.prepareStatement(consulta);
        rset = stmt.executeQuery();

    
    while(rset.next()){
            var requerimiento1VO = new Requerimiento_1();
            requerimiento1VO.setNombreMaterial(rset.getString("Nombre_Material"));
            requerimiento1VO.setPrecioUnidad(rset.getInt("Precio_Unidad"));
            
            respuesta.add(requerimiento1VO);
        }

        }finally{
        if(rset != null){
            rset.close();
        }
        if(stmt != null){
            stmt.close();
        }
        if(connection != null){
            connection.close();
        }
    }     

        return respuesta;
    }



}

public class Requerimiento_2Dao {
    public ArrayList<Requerimiento_2> requerimiento2() throws SQLException {
        var connection = JDBCUtilities.getConnection();
        var respuesta = new ArrayList<Requerimiento_2>();



        var consulta = "SELECT DISTINCT p.Constructora , p.Ciudad"
        + " FROM Proyecto p "
        + " WHERE p.Ciudad LIKE 'B%'"
        + " ORDER BY p.Ciudad ;"; 
       

 
        PreparedStatement stmt = null;
        ResultSet rset = null;


        try{

            stmt = connection.prepareStatement(consulta);
            rset = stmt.executeQuery();
    
        
        while(rset.next()){
                var requerimiento2VO = new Requerimiento_2();
                requerimiento2VO.setConstructora(rset.getString("Constructora"));
                requerimiento2VO.setCiudad(rset.getString("Ciudad"));
                
                respuesta.add(requerimiento2VO);
            }
    
            }finally{
            if(rset != null){
                rset.close();
            }
            if(stmt != null){
                stmt.close();
            }
            if(connection != null){
                connection.close();
            }
        }     



        return respuesta;
    }
}


public class Requerimiento_3Dao {
    public ArrayList<Requerimiento_3> requerimiento3() throws SQLException {
        var connection = JDBCUtilities.getConnection();
        var respuesta = new ArrayList<Requerimiento_3>();
        
        var consulta = "SELECT c.Proveedor, mc.Nombre_Material, mc.Importado, mc.Precio_Unidad, SUM(c.Cantidad ) as Cantidad"
        + " FROM MaterialConstruccion mc "
        + " JOIN Compra c ON mc.ID_MaterialConstruccion = c.ID_MaterialConstruccion" 
        + " WHERE mc.Importado = 'Si'AND c.Proveedor = 'Homecenter'"
        + " GROUP BY mc.Nombre_Material"
        + " HAVING SUM(c.Cantidad)>100";


        
        PreparedStatement stmt = null;
        ResultSet rset = null;

        try{

            stmt = connection.prepareStatement(consulta);
            rset = stmt.executeQuery();

        
        while(rset.next()){
                var requerimiento3VO = new Requerimiento_3();
                requerimiento3VO.setProveedor(rset.getString("Proveedor"));
                requerimiento3VO.setNombreMaterial(rset.getString("Nombre_Material"));
                requerimiento3VO.setImportado(rset.getString("Importado"));
                requerimiento3VO.setPrecioUnidad(rset.getInt("Precio_Unidad"));
                requerimiento3VO.setCantidad(rset.getInt("Cantidad"));
                
                respuesta.add(requerimiento3VO);
            }

        }finally{
            if(rset != null){
                rset.close();
            }
            if(stmt != null){
                stmt.close();
            }
            if(connection != null){
                connection.close();
            }
        }         



        return respuesta;




    }





   
}